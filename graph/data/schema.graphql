type cities {
  _id: String
  stars: [stars]
  geonameid: Int
  checkInDiff: Int
  checkOutDiff: Int
}

input citiesCreateInput {
  name: String
  geonameid: Int
  checkInDiff: Int
  checkOutDiff: Int
}

type City {
  _id: ID
  geonameid: Int
  name: String
  countryCode: String
}

type client {
  _id: ID
  name: String
  status: String
  balance: Int
}

type Mutation {
  updateSession(tripId: String, sessionId: String, session: UpdateSessionInput): Session
  cities(query: String): [City]
  signInUser(username: String, password: String): User
  createTour(tour: TourCreateInput): Tour
  updateTrip(tripId: String, trip: UpdateTripInput): Trip
  addNewTrip(tourId: String, initialDate: String): Trip
  updateTourName(tourId: String, tour: UpdateNameTourInput): Tour
  updateUser(userId: String, name: String): User
  SystemEvent(userId: Int, type: String, data: String): SystemEvent
}

type prices {
  _id: String
  checkIn: String
  checkOut: String
  price: Int
}

type proposals {
  rooms: [rooms]
  total: Int
}

type Query {
  city(query: Int): City
  user(userId: String): User
  session(sessionId: String): Session
  sessions(tripId: String): [Session]
  trip(tripId: String): Trip
  trips(tourId: String): [Trip]
  tour(tourId: String): Tour
  tours: [Tour]
  SystemEvent(userId: String): SystemEvent
}

type room {
  _id: String
  abbr: String
  name: String
  order: Int
}

type rooms {
  _id: String
  total: Int
  room: String
  amount: String
  prices: [prices]
}

input roomSession {
  abbr: String
  name: String
  order: Int
}

input roomsSession {
  room: roomSession
  amount: Int
  checkIn: String
  checkOut: String
}

type Session {
  _id: ID
  createdAt: String
  proposals: proposals
  trip: trip
  checkIn: String
  checkOut: String
  num: String
  rooms: [tourRooms]
  geonameid: Int
}

type stars {
  star: Int
  value: Boolean
}

type Subscription {
  sessionUpdated: Session
  tourCreated: Tour
  tripCreated: Trip
  tripUpdated(tripId: Int): Trip
  tourNameUpdated(tourId: Int): Tour
  userUpdated(userId: Int): User
  SystemEvent(userId: Int): SystemEvent
}

type SystemEvent {
  type: String
  data: String
}

type template {
  initialDate: String
  rooms: [tourRooms]
  cities: [cities]
}

input templateCreateInput {
  initialDate: String
  rooms: [tourRoomsCreateInput]
  cities: [citiesCreateInput]
}

type tour {
  _id: String
  name: String
}

type Tour {
  _id: ID
  isSerial: Boolean
  template: template
  tripDates: [String]
  name: String
  createdBy: String
  client: String
  order: Int
  createdAt: String
  past: Boolean
}

input TourCreateInput {
  name: String
  abbr: String
  isSerial: Boolean
  template: templateCreateInput
}

type tourRooms {
  _id: String
  room: room
  amount: Int
}

input tourRoomsCreateInput {
  room: String
  amount: Int
}

type trip {
  _id: String
  name: String
  tour: tour
}

type Trip {
  _id: String
  vouchers: [String]
  tour: tour
  name: String
  createdBy: String
  client: String
  createdAt: String
  sessions: [Session]
}

input UpdateNameTourInput {
  name: String
}

input UpdateSessionInput {
  checkIn: String
  checkOut: String
  geonameid: Int
  rooms: [roomsSession]
}

input UpdateTripInput {
  name: String
}

type User {
  _id: ID
  name: String
  createdAt: String
  email: String
  group: String
  lang: String
  username: String
  status: String
  role: String
  phone: String
  token: String
  loginAttempts: Int
  emailNotifications: [String]
  client: client
}
